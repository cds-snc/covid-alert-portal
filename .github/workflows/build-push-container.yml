name: Build and Push to Container Registries

on:
  push:
    branches: [main]

env:
  GITHUB_SHA: ${{ github.sha }}
  BRANCH: ${{ github.ref }}

jobs:
  terraform-security-scan:
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Terraform security scan
        uses: triat/terraform-security-scan@v2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-n-push:
    needs: terraform-security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Wait for container to pass Django CI 3.6 Test
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-CI-tests-3_6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: test (3.6)
          ref: ${{ github.sha }}

      - name: Wait for container to pass Django CI 3.7 Test
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-CI-tests-3_7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: test (3.7)
          ref: ${{ github.sha }}

      - name: Wait for container to pass Django CI 3.8 Test
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-CI-tests-3_8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: test (3.8)
          ref: ${{ github.sha }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Read VERSION file
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./VERSION

      - name: Build Covid Portal
        run: docker build -t base --build-arg GITHUB_SHA_ARG=$GITHUB_SHA .

      - name: Configure AWS credentials
        id: aws-covid-portal
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Login to Staging Amazon ECR
        id: login-ecr-covid-portal
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Images for Staging
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-covid-portal.outputs.registry }}
          ECR_REPOSITORY: covid-alert-portal-terraform
          VERSION: ${{ steps.version.outputs.content }}
        run: |
          docker tag base $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
          docker tag base $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker tag base $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Push containers to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-covid-portal.outputs.registry }}
          ECR_REPOSITORY: covid-alert-portal-terraform
          VERSION: ${{ steps.version.outputs.content }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Logout of Staging Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr-covid-portal.outputs.registry }}

      - name: Configure Production AWS credentials
        id: aws-production
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Login to Production Amazon ECR
        id: login-ecr-prod
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Images for Production
        env:
          PROD_ECR_REGISTRY: ${{ secrets.PROD_ECR_REGISTRY }}
          VERSION: ${{ steps.version.outputs.content }}
        run: |
          docker tag base $PROD_ECR_REGISTRY:$GITHUB_SHA
          docker tag base $PROD_ECR_REGISTRY:$VERSION
          docker tag base $PROD_ECR_REGISTRY:latest

      - name: Push all containers to production Amazon ECR
        env:
          PROD_ECR_REGISTRY: ${{ secrets.PROD_ECR_REGISTRY }}
          VERSION: ${{ steps.version.outputs.content }}
        run: |
          docker push $PROD_ECR_REGISTRY:$GITHUB_SHA
          docker push $PROD_ECR_REGISTRY:$VERSION
          docker push $PROD_ECR_REGISTRY:latest

      - name: Logout of Production Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr-prod.outputs.registry }}
