name: Deploy to AWS ECS

on:
  push:
    branches: [aws_docker_build]

env:
  GITHUB_SHA: ${{ github.sha }}
  BRANCH: ${{ github.ref }}

jobs:
  deploy-service:
    if: github.ref == 'refs/heads/aws_docker_build' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for container to be built and pushed
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-build
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: build-n-push
          ref: ${{ github.sha }}

      - name: Checkout
        if: steps.wait-for-build.outputs.conclusion == 'success'
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Cluster Name
        id: cluster
        run: |
          echo "##[set-output name=name;]$(aws ecs list-clusters | jq -r '.clusterArns[0]' | cut -f 2 -d "/" )"
      - name: Download covid-portal task definition
        id: download-taskdef-covid-portal
        run: |
          aws ecs describe-task-definition --task-definition covid-portal --query taskDefinition > task-definition-portal.json
          echo "##[set-output name=container_name;]$(jq -r '.containerDefinitions[0].name' task-definition-portal.json)"
      - name: Render image for covid portal
        id: taskdef-portal
        uses: aws-actions/amazon-ecs-render-task-definition@9666dc9
        with:
          task-definition: task-definition-portal.json
          container-name: ${{ steps.download-taskdef-covid-portal.outputs.container_name }}
          image: ${{ steps.login-ecr.outputs.registry }}/covid-alert-portal-terraform:${{ github.sha }}

      - name: Render appspec for covid portal
        run: |
          CONTAINER_PORT=`jq '.containerDefinitions[0].portMappings[0].containerPort' task-definition-portal.json`
          CONTAINER_NAME=${{ steps.download-taskdef-covid-portal.outputs.container_name }}
          TASKDEF_ARN=`jq -r '.taskDefinitionArn' task-definition-portal.json | cut -f 1-6 -d "/"`
          jq  --argjson port "$CONTAINER_PORT" --arg cname "$CONTAINER_NAME" --arg taskdefarn "$TASKDEF_ARN" '.Resources[0].TargetService.Properties.TaskDefinition = $taskdefarn | .Resources[0].TargetService.Properties.LoadBalancerInfo.ContainerName = $cname | .Resources[0].TargetService.Properties.LoadBalancerInfo.ContainerPort = $port ' config/infrastructure/aws/appspec-template.json > covid-portal-appspec.json
      - name: Deploy image for covidportal
        timeout-minutes: 15
        uses: aws-actions/amazon-ecs-deploy-task-definition@7218b9c
        with:
          task-definition: ${{ steps.taskdef-portal.outputs.task-definition }}
          service: covid-portal
          cluster: ${{ steps.cluster.outputs.name }}
          wait-for-service-stability: true
          codedeploy-appspec: ${{ github.workspace }}/covid-portal-appspec.json

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}